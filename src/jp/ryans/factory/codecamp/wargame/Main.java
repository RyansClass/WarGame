/**
 * Main.java
 * 概要
 * ゲームは以下の内容で進行します。
 * 1．対戦はプレイヤーとコンピュータ(CPU)の1対1の対戦です。
 * 2．使用するカードはスペードとダイヤの2〜10,J,Q,K,Aのみの計26枚とします。
 * 3．使用するカードをシャッフルし、プレイヤーとCPUに均等に配布します。配られたカードの内容はプレイ ヤーには見えません。
 * 4．以下の手順でゲームを進行します。
 * 4.1.プレイヤーとCPUは、プレイヤーの合図で手札の中から一番上の1枚を同時に場に出します。
 * 4.2.場に置かれたカードを開いて数が高い方が勝ち（2が一番弱く、そこから数字が高い方が強くなり、Aは最も強いカードです。マークは関係なし）となり、場に置かれたカード2枚を獲得します。
 * 4.3.同点の場合は、出されたカードは場に蓄えられ、次回以降の勝負で勝った方が総取りします。
 * ゲーム終了時点で場にあるカードは破棄されます。
 * 4.4.「4.1」〜「4.3」を1ターンとして、プレイヤーまたはCPUの手札がなくなるまでターンを繰り返します。
 * 終了した時点で獲得した札が多い方が勝者となります。
 *
 * 要件
 * 以下の要件を満たすようにしてください。
 * 1.ゲーム開始後、それぞれの持ち札を表示して、札を切るか、中断するかを選択させる。
 * 2.各ターンのはじめに、
 * 「何ターン目か（例、第1回戦）」
 * 「場に積まれた札の枚数」
 * 「CPUの手札の枚数と獲得したカードの枚数」
 * 「プレイヤーの手札の枚数と獲得したカードの枚数」
 * をそれぞれ表示する。
 * 3.各ターンのはじめに、ゲームを中断できる。
 * 3.1.ゲームを中断した場合、現在の状態をファイルに保存する。
 * 4.次回のゲーム起動時に、ゲームの中断結果ファイルが存在する場合は、続きをするか、新規ゲームをするかの再開を選択できる。
 * 4.1.もし「y(続きをするか)」または「n(新規ゲーム)」の文字以外が入力された場合、エラーメッセージを表示させて（例、yまたはnの文字を入力してください）、再度、再開の選択を表示する。
 * また、ゲームが最後まで終了した場合は、次回のゲーム開始時に、続きをするか、新規ゲームをするかの再開の選択を表示しない。
 * 5.カードを出すタイミングは、プレイヤーが入力する。
 * 5.1.このときに、入力された文字によって、カードを切るか、または中断するかを選択する。
 * 5.2.もし「d(札を切る)」または「q(中断)」の文字以外が入力された場合、エラーメッセージを表示させて（例、d(札を切る)、またはq(中断)の文字を入力してください）、再度、札を切るか、中断するかの選択を表示する。
 * 6.カードを切り終えたら、プレイヤーとCPUが切ったカードの種類と数値をそれぞれ表示し、どちらが札を獲得したのか（あるいは引き分けたのか）、分かるように表示する。
 * 7.プレイヤーが勝った場合は、プレイヤーの獲得札に場の札を追加する。
 * 8.CPUが勝った場合は、CPUの獲得札に場の札を追加する。
 * 9.引き分けの場合は、場の札は場に積んだままにして、次回の勝者が決まるまで持ち越し、次回の勝者側に場に積んだ札を追加する。
 * 10.プレイヤーとCPU双方の手札が残っている場合は、つづけて次のターンを実行する。
 * 11.プレイヤーあるいはCPUの手札がなくなった場合、試合終了になる。
 * 11.1.試合の結果（「CPUの総獲得札数」「プレイヤーの総獲得札数」「プレイヤーが勝った、負けた、または引き分け」）を表示する。
 * 11.2.最後のターンが引き分けで場に札が残っているときは、場の札を破棄する。
 * 12.試合終了後、これまでの「ゲーム回数」「プレイヤーの勝利回数」「プレイヤーの最大カード獲得枚数（プレイヤーが勝利したときのみ）」を、CSVファイルに記録する。
 *
 */
package jp.ryans.factory.codecamp.wargame;

import java.util.Locale;

import jp.ryans.factory.codecamp.wargame.resource.Strings;

/**
 * ゲーム メインクラス
 */
public class Main {

	/**
	 * 国際化対応リソース
	 */
	public static Strings resource;


	/**
	 * 実行メッソド
	 * @param args 言語指定
	 */
	public static void main(String[] args) {

		// 実行時に引数があれば言語指定
		if ( 0 == args.length ) {
			// デフォルトの言語
			resource = Strings.getInstance(Locale.getDefault().getLanguage());
		} else {
			// 言語指定
			resource = Strings.getInstance(args[0]);
		}
		
		String os = GameConst.WINDOWS;

		try{
			// 環境変数からOSの名前を取得する
			os = System.getProperty(GameConst.ENV_OS).toLowerCase();

		} catch(SecurityException e) {
			// セキュリティー違反
			System.exit(GameConst.ABEND);

		}
		// ゲームクラスを生成する
		WarGame game = new WarGame(os);
		// ゲームの結果保存ファイルを設定する
		game.setGameResultFilename(GameConst.GAMEDATA_FILEPATH);
		// ゲームの中断データ保存ファイルを設定する
		game.setInterruptionFilename(GameConst.INTERRUPTION_FILEPATH);
		// ゲームの実行
		int status = game.run();
		// プログラム終了
		System.exit(status);
	}

}
